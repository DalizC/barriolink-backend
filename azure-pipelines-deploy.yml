trigger:
- main
- develop

variables:
  pythonVersion: '3.12'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    pool:
      vmImage: 'ubuntu-latest'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_barriolink-dev
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - script: |
        python manage.py check
      displayName: 'Django check'
      env:
        SECRET_KEY: $(SECRET_KEY)
        DEBUG: 'False'
        DJANGO_SETTINGS_MODULE: 'app.settings'
        DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/test_barriolink-dev'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'

    - script: |
        python manage.py test --keepdb
      displayName: 'Run tests'
      env:
        SECRET_KEY: $(SECRET_KEY)
        DEBUG: 'False'
        DJANGO_SETTINGS_MODULE: 'app.settings'
        DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/test_barriolink-dev'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'

    - script: |
        # Crear directorio para dependencias pre-instaladas
        mkdir -p deployment_package
        cp -r . deployment_package/
        cd deployment_package

        # Instalar dependencias en el directorio local
        pip install -r requirements.txt --target ./packages

        # Crear script de startup que use las dependencias locales
        echo '#!/bin/bash' > startup.sh
        echo 'set -e  # Exit on any error' >> startup.sh
        echo 'echo "=== STARTUP SCRIPT INICIANDO ==="' >> startup.sh
        echo 'echo "Current user: $(whoami)"' >> startup.sh
        echo 'echo "Current directory: $(pwd)"' >> startup.sh
        echo 'echo "Available files:"' >> startup.sh
        echo 'ls -la' >> startup.sh
        echo 'export PYTHONPATH="/home/site/wwwroot/packages:$PYTHONPATH"' >> startup.sh
        echo 'echo "PYTHONPATH configurado: $PYTHONPATH"' >> startup.sh
        echo 'echo "PORT configurado: ${PORT:-8000}"' >> startup.sh
        echo 'echo "Python version:"' >> startup.sh
        echo 'python --version' >> startup.sh
        echo 'echo "Verificando que packages existe:"' >> startup.sh
        echo 'ls -la packages/ | head -5' >> startup.sh
        echo 'echo "Verificando Django import..."' >> startup.sh
        echo 'python -c "import sys; print(\"Python path:\", sys.path[:3])"' >> startup.sh
        echo 'python -c "import django; print(f\"Django version: {django.VERSION}\")"' >> startup.sh
        echo 'echo "Verificando app.wsgi..."' >> startup.sh
        echo 'python -c "import app.wsgi; print(\"WSGI module loaded successfully\")"' >> startup.sh
        echo 'echo "Iniciando gunicorn en puerto ${PORT:-8000}..."' >> startup.sh
        echo 'exec python -m gunicorn app.wsgi:application --bind=0.0.0.0:${PORT:-8000} --timeout 60 --log-level debug --access-logfile - --error-logfile -' >> startup.sh
        chmod +x startup.sh

        echo "Package prepared with pre-installed dependencies"
        echo "=== VERIFICANDO ESTRUCTURA DEL PACKAGE ==="
        ls -la
        echo "=== VERIFICANDO PACKAGES DIRECTORY ==="
        ls -la packages/ | head -10
        echo "=== VERIFICANDO DJANGO EN PACKAGES ==="
        ls -la packages/django* || echo "Django no encontrado en packages"
        echo "=== VERIFICANDO STARTUP SCRIPT ==="
        cat startup.sh
        echo "=== TEST LOCAL DEL PYTHONPATH ==="
        PYTHONPATH="./packages:$PYTHONPATH" python -c "import django; print('Django importado exitosamente')" || echo "Error importando Django"
      displayName: 'Prepare deployment package with dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/deployment_package'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - script: |
        echo "Deployment package verification:"
        ls -la deployment_package/
        echo ""
        echo "Dependencies in packages directory:"
        ls -la deployment_package/packages/ | head -10
        echo ""
        echo "Startup script exists and is executable:"
        ls -la deployment_package/startup.sh
      displayName: 'Verify package contents'

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: DeployDevelopment
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployWebDev
    displayName: 'Deploy Web App Dev'
    environment: 'development'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App Dev'
            inputs:
              azureSubscription: 'Azure-BarrioLink'
              appType: 'webAppLinux'
              appName: '$(APP_SERVICE_NAME)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'PYTHON|3.12'
              startUpCommand: '/home/site/wwwroot/startup.sh'
              appSettings: '-SECRET_KEY "$(SECRET_KEY)" -DEBUG "True" -DJANGO_SETTINGS_MODULE "app.settings" -DATABASE_URL "$(DATABASE_URL)" -ALLOWED_HOSTS "$(ALLOWED_HOSTS)"'

- stage: DeployProduction
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployWeb
    displayName: 'Deploy Web App'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure-BarrioLink'
              appType: 'webAppLinux'
              appName: '$(APP_SERVICE_NAME)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'PYTHON|3.12'
              startUpCommand: '/home/site/wwwroot/startup.sh'
              appSettings: '-SECRET_KEY "$(SECRET_KEY)" -DEBUG "False" -DJANGO_SETTINGS_MODULE "app.settings" -DATABASE_URL "$(DATABASE_URL)" -ALLOWED_HOSTS "$(ALLOWED_HOSTS)"'