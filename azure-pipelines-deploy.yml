trigger:
- main
- develop

variables:
  pythonVersion: '3.12'

stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    pool:
      vmImage: 'ubuntu-latest'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - script: |
        python manage.py check
      displayName: 'Django check'
      env:
        SECRET_KEY: $(SECRET_KEY)
        DJANGO_SETTINGS_MODULE: 'app.settings'
        DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/test_barriolink-dev'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'

    - script: |
        python manage.py collectstatic --noinput
      displayName: 'Collect static'

    - script: |
        python manage.py test --keepdb
      displayName: 'Run tests'
      env:
        SECRET_KEY: $(SECRET_KEY)
        DJANGO_SETTINGS_MODULE: 'app.settings'
        DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/test_barriolink-dev'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'

    - task: ArchiveFiles@2
      displayName: 'Archive repo root'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
        replaceExistingArchive: true

    - publish: '$(Build.ArtifactStagingDirectory)/app.zip'
      artifact: drop

- stage: DeployDevelopment
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployWebDev
    displayName: 'Deploy Web App Dev'
    environment: 'development'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App Dev'
            inputs:
              azureSubscription: 'Azure-BarrioLink'
              appType: 'webAppLinux'
              appName: '$(APP_SERVICE_NAME)'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.12'

- stage: DeployProduction
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployWeb
    displayName: 'Deploy Web App'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure-BarrioLink'
              appType: 'webAppLinux'
              appName: '$(APP_SERVICE_NAME)'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.12'
